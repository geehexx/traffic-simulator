# Minimal type stubs for pymunk library
from typing import Any, Optional, Union, List, Tuple, Callable, Protocol

class Vec2d:
    def __init__(self, x: float, y: float) -> None: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    def __add__(self, other: Vec2d) -> Vec2d: ...
    def __sub__(self, other: Vec2d) -> Vec2d: ...
    def __mul__(self, other: float) -> Vec2d: ...
    def __truediv__(self, other: float) -> Vec2d: ...

class Space:
    def __init__(self, thread_direction: int = ..., threaded: bool = ...) -> None: ...
    def add(self, obj: Union[Body, Shape, Constraint]) -> None: ...
    def remove(self, obj: Union[Body, Shape, Constraint]) -> None: ...
    def step(self, dt: float) -> None: ...
    def point_query(self, point: Tuple[float, float], max_distance: float = ..., shape_filter: Any = ...) -> List[PointQueryInfo]: ...

class Body:
    def __init__(self, mass: float = ..., moment: float = ..., body_type: int = ...) -> None: ...
    @property
    def position(self) -> Vec2d: ...
    @position.setter
    def position(self, value: Vec2d) -> None: ...
    @property
    def angle(self) -> float: ...
    @angle.setter
    def angle(self, value: float) -> None: ...
    @property
    def velocity(self) -> Vec2d: ...
    @velocity.setter
    def velocity(self, value: Vec2d) -> None: ...

class Shape:
    def __init__(self, body: Body, shape: Any) -> None: ...
    @property
    def body(self) -> Body: ...

class Circle(Shape):
    def __init__(self, body: Body, radius: float, offset: Vec2d = ...) -> None: ...

class Segment(Shape):
    def __init__(self, body: Body, a: Vec2d, b: Vec2d, radius: float) -> None: ...

class Poly(Shape):
    def __init__(self, body: Body, vertices: List[Vec2d], radius: float = ..., transform: Any = ...) -> None: ...

class Constraint:
    def __init__(self, a: Body, b: Body) -> None: ...

class PointQueryInfo:
    def __init__(self, shape: Shape, point: Vec2d, distance: float, gradient: Vec2d) -> None: ...
    @property
    def shape(self) -> Shape: ...
    @property
    def point(self) -> Vec2d: ...
    @property
    def distance(self) -> float: ...

# Constants
BODY_DYNAMIC: int
BODY_KINEMATIC: int
BODY_STATIC: int
