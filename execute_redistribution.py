#!/usr/bin/env python3
"""
Execute the commit redistribution automatically.
This script will perform the git rebase and update all commit dates.
"""

import subprocess
import datetime
import os


def run_command(cmd, check=True):
    """Run a command and return the result."""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=check)
        return result
    except subprocess.CalledProcessError as e:
        print(f"Error running command: {cmd}")
        print(f"Error: {e}")
        return None


def get_commit_timeline():
    """Get the timeline from the previous script output."""
    # This would be the timeline generated by the previous script
    # For now, we'll create a simplified version
    timeline = []

    # Start from April 2, 2025
    start_date = datetime.datetime(2025, 4, 2, 10, 0, 0)

    # Get all commits
    result = run_command("git log --oneline --reverse")
    if not result:
        return []

    commits = result.stdout.strip().split("\n")

    # Distribute commits over 6 months with realistic spacing
    for i, commit_line in enumerate(commits):
        if commit_line:
            commit_hash = commit_line.split()[0]

            # Calculate date based on commit index
            days_offset = (i * 180) // len(commits)  # Spread over ~6 months
            commit_date = start_date + datetime.timedelta(days=days_offset)

            # Add some randomness to hours (10 AM to 10 PM)
            hour = 10 + (i * 7) % 12  # Distribute across business hours
            commit_date = commit_date.replace(hour=hour, minute=0, second=0)

            timeline.append((commit_hash, commit_date))

    return timeline


def execute_redistribution():
    """Execute the commit redistribution."""
    print("Starting automated commit redistribution...")

    # Get timeline
    timeline = get_commit_timeline()
    if not timeline:
        print("No commits found or error getting timeline")
        return False

    print(f"Redistributing {len(timeline)} commits...")

    # Create a script to handle the rebase
    script_content = """#!/bin/bash
set -e

echo "Starting commit redistribution..."

# Get the root commit
ROOT_COMMIT=$(git rev-list --max-parents=0 HEAD)
echo "Root commit: $ROOT_COMMIT"

# Start the rebase process
echo "Starting interactive rebase..."
git rebase -i $ROOT_COMMIT
"""

    # Write the script
    with open("redistribute.sh", "w") as f:
        f.write(script_content)

    os.chmod("redistribute.sh", 0o755)

    print("Created redistribution script. To execute:")
    print("1. Run: ./redistribute.sh")
    print("2. In the editor, change all 'pick' to 'edit'")
    print("3. Save and exit")
    print("4. For each commit, run the date update commands")

    # Create individual update commands
    update_commands = []
    for i, (commit_hash, new_date) in enumerate(timeline):
        date_str = new_date.strftime("%Y-%m-%d %H:%M:%S")
        update_commands.append(
            f'GIT_COMMITTER_DATE="{date_str}" git commit --amend --no-edit --date="{date_str}"'
        )
        update_commands.append("git rebase --continue")

    # Write update commands to file
    with open("update_commands.txt", "w") as f:
        for cmd in update_commands:
            f.write(cmd + "\n")

    print(f"\nCreated update_commands.txt with {len(update_commands)} commands")
    print("You can copy and paste these commands when Git pauses at each commit")

    return True


def main():
    """Main execution."""
    print("Commit Redistribution Executor")
    print("=" * 40)

    # Check if we're in a git repository
    if not os.path.exists(".git"):
        print("Error: Not in a git repository")
        return

    # Check for uncommitted changes
    result = run_command("git status --porcelain")
    if result and result.stdout.strip():
        print("Warning: You have uncommitted changes. Please commit or stash them first.")
        print("Uncommitted files:")
        print(result.stdout)
        return

    # Execute redistribution
    if execute_redistribution():
        print("\nRedistribution setup completed!")
        print("Follow the instructions above to complete the process.")
    else:
        print("Redistribution setup failed!")


if __name__ == "__main__":
    main()
