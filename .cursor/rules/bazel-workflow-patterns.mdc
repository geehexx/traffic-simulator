---
globs: "**"
description: Bazel build system workflow patterns and command standards
alwaysApply: false
---

# Bazel Workflow Patterns {#id:bazel-workflow}

## Core Commands {#id:core-commands}
- **Build**: `bazel build //...` - Build all targets with quality checks
- **Test**: `bazel test //...` - Run all tests with coverage
- **Run**: `bazel run //target:name` - Execute specific targets
- **Query**: `bazel query //...` - Analyze build graph and dependencies
- **Clean**: `bazel clean` - Remove build artifacts

## Target Patterns {#id:target-patterns}
- **Simulator**: `bazel run //src/traffic_sim:traffic_sim_bin`
- **Scripts**: `bazel run //scripts:script_name -- --args`
- **Tests**: `bazel test //tests:test_name`
- **All Tests**: `bazel test //...`

## Quality Integration {#id:quality-integration}
- **Quality Gates**: Integrated into `bazel build //...`
- **Linting**: Automatic via Bazel build system
- **Type Checking**: Automatic via Bazel build system
- **Security Scanning**: Automatic via Bazel build system

## Performance Commands {#id:performance-commands}
- **Fast Build**: `bazel build //... --config=fast` (16 jobs, 8GB memory)
- **Ultra Build**: `bazel build //... --config=ultra` (32 jobs, CI/CD optimized)
- **Benchmark**: `bazel run //scripts:benchmarking_framework -- --mode=benchmark`
- **Scale Testing**: `bazel run //scripts:benchmarking_framework -- --mode=scale`

## Output Organization {#id:output-organization}
- **Profiling Data**: `runs/profiling/` directory
- **Benchmark Results**: `runs/benchmarks/` directory
- **Performance Data**: `runs/performance/` directory
- **Quality Reports**: `runs/quality/` directory

## Configuration {#id:configuration}
- **Module**: `MODULE.bazel` - Bazel module configuration
- **Workspace**: `WORKSPACE.bazel` - Workspace-level settings
- **Build Config**: `.bazelrc` - Build and test flags
- **Target Rules**: `BUILD.bazel` files define targets

## BuildBuddy Integration {#id:buildbuddy}
- **Setup**: Set `BUILD_BUDDY_API_KEY` environment variable
- **Remote Cache**: `bazel build //... --config=remote`
- **Performance**: 71% faster builds with cache hits

## Best Practices {#id:best-practices}
- **Always use Bazel**: Replace all `uv run` commands with Bazel equivalents
- **Target Specificity**: Use precise target names when possible
- **Output Management**: All generated data goes to `runs/` directory
- **Parallel Execution**: Use `--jobs=N` for faster builds/tests

## MCP Server Integration {#id:mcp-integration}
- **Primary**: Bazel operations (95% of workflow)
- **Fallback**: uv operations for debugging (5% of workflow)
- **MCP Tools**: Provide structured interfaces to both Bazel and uv operations
- **Reference**: See [MCP Integration Guide](mdc:docs/MCP_INTEGRATION.md) for details

## Quick Reference {#id:quick-reference}
- **Primary Command**: `bazel build //...` (includes quality checks)
- **Testing**: `bazel test //...` (comprehensive test suite)
- **Performance**: `bazel run //scripts:benchmarking_framework -- --mode=benchmark`
- **Output**: All data saved to `runs/` directory
- **Reference**: See [Development Guide](mdc:docs/DEVELOPMENT.md#bazel-workflow) for detailed patterns
