---
globs: src/traffic_sim/config/**
description: Configuration management patterns and validation
alwaysApply: false
---

# Configuration Patterns

## Structure & Loading
- **Main Config**: `config/` YAML files.
- **Loader**: `src/traffic_sim/config/loader.py` with validation on load.
- **Reference**: [Architecture Guide](mdc:docs/ARCHITECTURE.md#configuration-architecture)

## Environment Variables
- **Pattern**: `TRAFFIC_SIM_CONFIG` for custom config path.
- **Docs**: [Development Guide](mdc:docs/DEVELOPMENT.md#configuration-management)

## Validation & Errors
- Validate all keys and types; fail fast with actionable messages.
- Use specific exceptions with context.

## Performance Feature Flags
- Physics: `physics.numpy_engine_enabled`, `physics.adaptive_timestep_enabled`
- High Performance: `high_performance.enabled`, `high_performance.idm_vectorized`
- Collisions: `collisions.event_scheduler_enabled`, `collisions.event_horizon_s`, `collisions.guard_band_m`
- Data Manager: `data_manager.enabled`, `data_manager.max_vehicles`
- Reference: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#performance-testing)

## HUD Occlusion Configuration {#id:hud-occlusion-config}
- Document exact keys and defaults from repo config (confirm before publishing).
- Validate boolean and numeric types; provide clear error messages.
- Cross-reference perception/render docs without linking docsâ†’rules.

## Benchmarking Output
- All outputs to `runs/` with organized subdirectories per guide.
- See [Benchmarking Guide](mdc:docs/BENCHMARKING_GUIDE.md#runs-directory-structure)
---
globs: src/traffic_sim/config/**,config/**
description: Configuration management patterns
alwaysApply: false
---

# Configuration Patterns

## Configuration Structure
- **Main Config**: [config.yaml](mdc:config/config.yaml)
- **Loader**: [loader.py](mdc:src/traffic_sim/config/loader.py)
- **Reference**: [Architecture Guide](mdc:docs/ARCHITECTURE.md#configuration-architecture)

## Configuration Patterns
- **Pattern**: YAML for human-readable configuration
- **Reference**: [Development Guide](mdc:docs/DEVELOPMENT.md#configuration-management)

## Environment Variables
- **Pattern**: `TRAFFIC_SIM_CONFIG` for custom config path
- **Reference**: [Development Guide](mdc:docs/DEVELOPMENT.md#configuration-management)

## Validation
- **Pattern**: Validate configuration on load
- **Reference**: [Architecture Guide](mdc:docs/ARCHITECTURE.md#configuration-architecture)

## Driver Parameters
- **Pattern**: Gaussian distributions with correlations
- **Reference**: [Architecture Guide](mdc:docs/ARCHITECTURE.md#core-components)

## Error Handling
- **Pattern**: Clear error messages for invalid config
- **Reference**: [Quality Standards Guide](mdc:docs/QUALITY_STANDARDS.md#error-handling)

### HUD Occlusion Configuration {#id:hud-occlusion-config}
- **Key**: Document the current, exact configuration key(s) used for HUD occlusion, confirming against repo config. If uncertain, ask for confirmation before inclusion.
- **CLI Flag**: If CLI integration exists, document the exact flag spelling; otherwise omit.
- **Default**: State the actual default from the repository config; do not assume.
- **Validation**: Boolean or appropriate type; fail fast on invalid values; provide actionable messages.
- **Cross-References**: See perception/rendering documentation in project docs for behavior; avoid linking from docs to rules.

## Performance Optimization Configuration
- **Pattern**: Feature-flagged optimizations for safe rollout
- **Physics**: numpy_engine_enabled, adaptive_timestep_enabled
- **High Performance**: enabled, idm_vectorized
- **Collisions**: event_scheduler_enabled, event_horizon_s, guard_band_m
- **Data Manager**: enabled, max_vehicles
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#configuration-management)

## Benchmarking Configuration
- **Pattern**: Centralized configuration for all profiling/benchmark output
- **Base Directory**: `runs/` - centralized location for all performance data
- **Config File**: [benchmarking.yaml](mdc:config/benchmarking.yaml)
- **Output Types**: CSV, JSON, HTML reports, flame graphs
- **Directory Structure**: Organized by analysis type (profiling, benchmarks, performance, scaling)
- **Reference**: [Benchmarking Guide](mdc:docs/BENCHMARKING_GUIDE.md#runs-directory-structure)
