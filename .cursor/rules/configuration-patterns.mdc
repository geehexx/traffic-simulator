---
globs:
  - "**/*.py"
  - "**/*.md"
  - "**/*.yml"
  - "**/*.yaml"
  - "**/*.sh"
  - "**/*.bash"
  - "**/*.txt"
description: Configuration management patterns and file organization
alwaysApply: true
---

# Configuration Patterns {#id:configuration-patterns}

## Core Configuration {#id:core-configuration}
- **Main Config**: [config.yaml](mdc:config/config.yaml) - Primary configuration file
- **Loader**: [loader.py](mdc:src/traffic_sim/config/loader.py) - Configuration loading and validation
- **Pattern**: YAML for human-readable configuration with validation on load
- **Environment**: `TRAFFIC_SIM_CONFIG` for custom config path
- **Reference**: See [Architecture Guide](mdc:docs/ARCHITECTURE.md#configuration-architecture) for detailed patterns

## Configuration Management {#id:configuration-management}
- **Driver Parameters**: Gaussian distributions with correlations
- **Error Handling**: Clear error messages for invalid config with actionable guidance
- **Validation**: Fail fast on invalid values, provide specific error context
- **Reference**: See [Development Guide](mdc:docs/DEVELOPMENT.md#configuration-management) for implementation

## File Organization {#id:file-organization}
- **Pattern**: All configuration files in `config/` directory
- **Files**: `bandit.yaml`, `quality_gates.yaml`, `radon.cfg`, `pyrightconfig.json`, `benchmarking.yaml`, `requirements_test.txt`
- **Benefits**: Cleaner root directory, better organization, consolidated management

## CRITICAL: Configuration File Enforcement {#id:enforcement}
- **MANDATORY**: All configuration files MUST be in `config/` directory
- **FORBIDDEN**: Configuration files in root directory (except essential build files)
- **ENFORCEMENT**: Move any config files found in root to `config/` directory
- **VALIDATION**: Check for misplaced config files before committing

## Specialized Configuration {#id:specialized-configuration}

### HUD Occlusion Configuration {#id:hud-occlusion-config}
- **Key**: Document exact configuration key(s) for HUD occlusion
- **Validation**: Boolean or appropriate type; fail fast on invalid values
- **Cross-References**: See perception/rendering documentation for behavior

### Performance Optimization Configuration {#id:performance-config}
- **Pattern**: Feature-flagged optimizations for safe rollout
- **Physics**: `numpy_engine_enabled`, `adaptive_timestep_enabled`
- **High Performance**: `enabled`, `idm_vectorized`
- **Collisions**: `event_scheduler_enabled`, `event_horizon_s`, `guard_band_m`
- **Data Manager**: `enabled`, `max_vehicles`
- **Reference**: See [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#configuration-management) for details

### Benchmarking Configuration {#id:benchmarking-config}
- **Pattern**: Centralized configuration for all profiling/benchmark output
- **Base Directory**: `runs/` - centralized location for all performance data
- **Config File**: [benchmarking.yaml](mdc:config/benchmarking.yaml)
- **Output Types**: CSV, JSON, HTML reports, flame graphs
- **Reference**: See [Benchmarking Guide](mdc:docs/BENCHMARKING_GUIDE.md#runs-directory-structure) for structure

### Headless Simulation Configuration {#id:headless-config}
- **Pattern**: Validate headless simulation parameters
- **Required Keys**: `profiling.enabled`, `random.master_seed`
- **Validation**: Boolean for profiling, integer for master_seed
- **Error Handling**: Fail fast with actionable messages for invalid config

### Dependency Analysis Configuration {#id:dependency-config}
- **Pattern**: Use existing tools for dependency analysis via task runner
- **Tools**: deptry for unused dependencies, ruff for unused imports
- **Commands**: `task deps:check`, `task deps:unused`, `task deps:audit`
- **Integration**: Taskfile.yml provides unified interface for dependency analysis

### Cursor Indexing Configuration {#id:cursor-indexing-config}
- **Pattern**: Strategic indexing for optimal Cursor performance
- **File**: `.cursorignore` - Controls what Cursor indexes vs. what git ignores
- **Strategy**: Keep `venv/` searchable for debugging, ignore generated data
- **CRITICAL**: Never ignore `.cursor/rules/` - contains essential project rules
- **Reference**: See [Cursor Rules Guide](mdc:docs/CURSOR_RULES.md#strategic-indexing-configuration) for details
