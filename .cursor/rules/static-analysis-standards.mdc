---
description: Static analysis and code quality standards for the traffic simulator
alwaysApply: true
---

# Static Analysis and Code Quality Standards

## Type Safety Requirements
- Always use type hints for function parameters and return values
- Use `from __future__ import annotations` for forward references
- Import types in `TYPE_CHECKING` blocks when only used for annotations
- Use `Optional[T]` instead of `Union[T, None]`
- Prefer `List[T]` over `list[T]` for Python < 3.9 compatibility

## Code Quality Standards
- Maintain Pylint score ≥8.0/10
- Keep functions under 50 lines and classes under 200 lines
- Maintain cyclomatic complexity ≤10
- Use descriptive variable and function names
- Add docstrings for all public functions and classes

## Import Organization
- Use `from __future__ import annotations` at the top
- Group imports: standard library, third-party, local imports
- Use `TYPE_CHECKING` for type-only imports
- Keep imports at the top of files

## Error Handling
- Use specific exception types, not bare `except:`
- Include context in error messages
- Use `raise ... from e` for exception chaining
- Log errors with appropriate levels

## Testing Requirements
- Write tests for all public functions
- Use descriptive test names
- Maintain test coverage ≥80%
- Use property-based testing for complex logic
- Test edge cases and error conditions

## Performance Guidelines
- Minimize allocations in hot paths
- Use numpy for numerical computations
- Cache expensive calculations
- Profile before optimizing
- Target 30+ FPS for simulation

## Security Best Practices
- No hardcoded secrets or passwords
- Use secure random generators for crypto purposes
- Validate all inputs and sanitize outputs
- Keep dependencies up to date
- Run security scans regularly