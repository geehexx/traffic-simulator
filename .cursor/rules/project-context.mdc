---
globs: **
description: Project context and core principles
alwaysApply: true
---

# Project Context

## Core Principles
- **Deterministic Simulation**: Fixed-step physics with seeded RNGs
- **Performance Target**: 30+ FPS with 20+ vehicles
- **Quality Standards**: [Quality Standards Guide](mdc:docs/QUALITY_STANDARDS.md)

## Key Components
- **Simulation**: [simulation.py](mdc:src/traffic_sim/core/simulation.py)
- **Drivers**: [driver.py](mdc:src/traffic_sim/core/driver.py)
- **Vehicles**: [vehicle.py](mdc:src/traffic_sim/core/vehicle.py)
- **Rendering**: [app.py](mdc:src/traffic_sim/render/app.py)

## Development Workflow
- **Setup**: `bazel build //...` (Bazel 7.1.1+ build system ready)
- **Testing**: `bazel test //...`
- **Quality**: `bazel build //...` (integrated quality gates)
- **Architecture**: [Architecture Guide](mdc:docs/ARCHITECTURE.md)

## Development Workflow Rules

### Hybrid Architecture
The project uses a **hybrid approach** combining Bazel and virtual environment:

#### Bazel Commands (Build System)
- **Building**: `bazel build //...` - Build all targets
- **Quality Checks**: `bazel build //...` - Integrated quality gates
- **CI/CD**: All automated processes use Bazel
- **Dependencies**: Simplified dependency management

#### Virtual Environment (Development)
- **Testing**: `uv run python -m pytest tests/` - Run tests with external dependencies
- **Scripts**: `uv run python scripts/benchmarking_framework.py` - Run scripts with dependencies
- **Development**: All development work with numpy, arcade, pymunk, etc.

#### Task Commands (Convenience)
- **Quality**: `task quality` - Quality gates via Bazel
- **Performance**: `task performance` - Benchmarking via Bazel (when dependencies available)
- **Testing**: `task test` - Testing via Bazel (when dependencies available)

### Command Selection Guidelines
- **Use Bazel** for: Building, quality checks, CI/CD, when dependencies are available
- **Use Virtual Environment** for: Development, testing, scripts with external dependencies
- **Use Task Commands** for: Convenience when Bazel targets are available

## Task Commands
- **Quality**: `task quality` (gates), `task quality:monitor` (detailed), `task quality:analyze` (comprehensive)
- **Performance**: `task performance` (benchmark), `task performance:scale` (scalability), `task performance:monitor` (real-time)
- **Specialized**: `task profile` (profiling), `task validate` (validation)

## Project Structure
- **Core Logic**: [src/traffic_sim/core/](mdc:src/traffic_sim/core/) - Simulation engine, vehicles, drivers
- **Rendering**: [src/traffic_sim/render/](mdc:src/traffic_sim/render/) - Arcade-based visualization
- **Configuration**: [config/](mdc:config/) - YAML configuration files (bandit.yaml, quality_gates.yaml, radon.cfg, pyrightconfig.json, benchmarking.yaml)
- **Tests**: [tests/](mdc:tests/) - Comprehensive test suite
- **Documentation**: [docs/](mdc:docs/) - Consolidated guides

## Key Features
- **2D Traffic Simulation**: Stadium track with realistic vehicle behavior
- **Statistical Drivers**: Gaussian copula sampling with correlations
- **IDM Controller**: Intelligent Driver Model with jerk limiting
- **Perception System**: Occlusion-based visibility and dynamic SSD
- **Safety Analytics**: AASHTO/TxDOT-style curve speed calculations
- **Live HUD**: Real-time safety panels and perception data
- **Live Analytics**: Real-time speed histogram, headway distribution, near-miss counter
- **Collision System**: Pymunk physics integration with lateral push effects and vehicle disable
- **Data Logging**: Comprehensive incident tracking, performance metrics, and CSV export
