---
globs: src/traffic_sim/core/**,src/traffic_sim/render/**
description: Performance optimization guidelines
---

# Performance Standards

## Performance Targets
- **Frame Rate**: 30+ FPS with 20+ vehicles
- **Memory**: Minimal runtime allocations
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#performance-targets)

## Simulation Optimization
- **Pattern**: Fixed timestep, vectorized operations
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#simulation-optimization)

## Rendering Optimization
- **Pattern**: Text object caching, draw call batching
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#rendering-optimization)

## Memory Management
- **Pattern**: Object pooling, pre-allocation
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#memory-management)

## Algorithm Optimization
- **Pattern**: Spatial partitioning, cached calculations
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#algorithm-optimization)

## Performance Testing
- **Pattern**: Automated performance tests
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#performance-testing)

## Analytics Performance
- **Pattern**: Bounded collections, batch processing, statistical caching
- **Key**: Use deque for rolling windows, update at configurable intervals
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#analytics-performance-optimization)

## Collision Performance
- **Pattern**: Spatial partitioning, collision filtering, physics stepping
- **Key**: Use pymunk spatial hash, filter unnecessary checks, reuse shapes
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#collision-system-performance)

## Event-Driven Collision Detection
- **Pattern**: Predictive TTC scheduling, adjacency tracking, version-based invalidation
- **Key**: Only check collision pairs when time-to-collision < horizon
- **Performance**: O(n) instead of O(nÂ²) collision checks
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#event-driven-collision-detection)

## Data Logging Performance
- **Pattern**: Asynchronous logging, batch writes, selective data collection
- **Key**: Background threads for CSV writing, configurable logging rates
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#data-logging-performance)

## Advanced Performance Optimizations
- **Pattern**: Vehicle pre-sorting, fast approximations, occlusion caching
- **Key**: Use PerformanceOptimizer for caching, Quake III algorithm for inverse sqrt
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#advanced-performance-optimizations)

## Physics Performance
- **Pattern**: Cache expensive physics calculations, vectorized operations
- **Key**: Use cached acceleration curves, aerodynamic drag calculations
- **Reference**: [Vehicle Physics Patterns](mdc:.cursor/rules/vehicle-physics-patterns.mdc)

## NumPy Physics Engine Performance
- **Pattern**: Vectorized operations, JIT compilation, pre-allocated arrays
- **Key**: Use NumPy for kinematics, Numba for acceleration, feature-flag for rollout
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#numpy-physics-engine-performance)
