---
globs: src/traffic_sim/core/**,src/traffic_sim/render/**
description: Performance optimization guidelines
---

# Performance Standards

## Performance Targets
- **Primary**: 30+ FPS with 20+ vehicles (baseline)
- **Stretch**: 1000+ vehicles at 100-1000x speed factors
- **Frame Rate**: 30+ FPS with 20+ vehicles
- **Memory**: Minimal runtime allocations
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#performance-targets)

## Simulation Optimization
- **Pattern**: Fixed timestep, vectorized operations
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#simulation-optimization)

## Rendering Optimization
- **Pattern**: Text object caching, draw call batching
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#rendering-optimization)

## Memory Management
- **Pattern**: Object pooling, pre-allocation
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#memory-management)

## Algorithm Optimization
- **Pattern**: Spatial partitioning, cached calculations
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#algorithm-optimization)

## Performance Testing
- **Pattern**: Automated performance tests
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#performance-testing)
- **Scripts**: `scripts/benchmarking_framework.py --mode=benchmark|scale|monitor|profile`
- **Output**: All profiling/benchmark data saved to `runs/` directory with organized subdirectories

## Unified Benchmarking Framework
- **Pattern**: Parallel execution, real-time estimation, comprehensive metrics
- **Key**: 3-5x performance improvement through parallelization
- **Features**: Intelligent caching, system monitoring, external tool integration
- **Reference**: [Benchmarking Guide](mdc:docs/BENCHMARKING_GUIDE.md)

## External Tools Integration
- **Pattern**: pytest-benchmark, ASV, Hyperfine, Py-Spy integration
- **Key**: Statistical analysis, historical tracking, command-line benchmarking
- **Reference**: [Benchmarking Guide](mdc:docs/BENCHMARKING_GUIDE.md#external-tools-integration)

## Advanced Profiling
- **Pattern**: Memory analysis, performance prediction, scaling modeling
- **Key**: Leak detection, resource bottleneck identification
- **Reference**: [Benchmarking Guide](mdc:docs/BENCHMARKING_GUIDE.md#advanced-profiling)

## Performance Analysis Modes
- **Benchmark**: `--mode=benchmark` - High-performance benchmark testing
- **Scale**: `--mode=scale` - Scale performance testing across vehicle counts
- **Monitor**: `--mode=monitor` - Real-time performance monitoring

## Analytics Performance
- **Pattern**: Bounded collections, batch processing, statistical caching
- **Key**: Use deque for rolling windows, update at configurable intervals
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#analytics-performance-optimization)

## Collision Performance
- **Pattern**: Spatial partitioning, collision filtering, physics stepping
- **Key**: Use pymunk spatial hash, filter unnecessary checks, reuse shapes
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#collision-system-performance)

## Event-Driven Collision Detection
- **Pattern**: Predictive TTC scheduling, adjacency tracking, version-based invalidation
- **Key**: Only check collision pairs when time-to-collision < horizon
- **Performance**: O(n) instead of O(nÂ²) collision checks
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#event-driven-collision-detection)

## Data Logging Performance
- **Pattern**: Asynchronous logging, batch writes, selective data collection
- **Key**: Background threads for CSV writing, configurable logging rates
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#data-logging-performance)

## Advanced Performance Optimizations
- **Pattern**: Vehicle pre-sorting, fast approximations, occlusion caching
- **Key**: Use PerformanceOptimizer for caching, Quake III algorithm for inverse sqrt
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#advanced-performance-optimizations)

## Physics Performance
- **Pattern**: Cache expensive physics calculations, vectorized operations
- **Key**: Use cached acceleration curves, aerodynamic drag calculations
- **Reference**: [Vehicle Physics Patterns](mdc:.cursor/rules/vehicle-physics-patterns.mdc)

## NumPy Physics Engine Performance
- **Pattern**: Vectorized operations, JIT compilation, pre-allocated arrays
- **Key**: Use NumPy for kinematics, Numba for acceleration, feature-flag for rollout
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#numpy-physics-engine-performance)

## Performance Optimization Results
- **Pattern**: Document achieved improvements and optimization techniques
- **Key**: 11.4x improvement at 20 vehicles, scales to 1000+ vehicles
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#performance-optimization-results)

## Runs Directory Organization
- **Pattern**: Centralized output location for all profiling/benchmark data
- **Structure**: `runs/profiling/`, `runs/benchmarks/`, `runs/performance/`, `runs/scaling/`
- **Enforcement**: All scripts default to runs directory; automatic directory creation
- **Git**: Entire runs directory excluded from version control
- **Reference**: [Benchmarking Guide](mdc:docs/BENCHMARKING_GUIDE.md#runs-directory-structure)

## Output File Organization
- **Profiling**: `runs/profiling/profiling_stats*.csv`, `runs/profiling/profiling_analysis/`
- **Benchmarks**: `runs/benchmarks/benchmark_results/`, `runs/benchmarks/comprehensive_benchmark/`
- **Performance**: `runs/performance/*_performance*.csv`
- **Scaling**: `runs/scaling/scale_benchmark*.csv`, `runs/scaling/scaling_analysis/`
- **Coverage**: `runs/coverage/.coverage`, `runs/coverage/htmlcov/`
- **Quality**: `runs/quality/quality_report.json`

## Script Defaults
- **benchmarking_framework.py**: Defaults to `runs/scaling/` and `runs/profiling/`
- **advanced_profiling.py**: Defaults to `runs/profiling/` and `runs/scaling/`
- **external_tools.py**: Defaults to `runs/benchmarks/`
- **quality_analysis.py**: Defaults to `runs/quality/`
- **Automatic Creation**: All scripts ensure runs directory structure exists

## Configuration Enforcement
- **Config File**: [benchmarking.yaml](mdc:config/benchmarking.yaml) sets `base_directory: "runs"`
- **Coverage Config**: Update coverage settings to use `runs/coverage/`
- **Environment**: Scripts automatically create directory structure
- **Validation**: Ensure output paths use runs directory structure

## Git Integration
- **Pattern**: Entire `runs/` directory excluded from version control
- **Rationale**: Generated data files should not be committed
- **Cleanup**: Regular cleanup of old profiling/benchmark data recommended

## Documentation Requirements
- **Examples**: All documentation examples must use runs directory paths
- **Enforcement**: AGENTS.md contains strong enforcement rules
- **Guides**: BENCHMARKING_GUIDE.md and SCRIPTS_GUIDE.md updated with runs directory usage
- **Coverage**: Document coverage file location in testing guides
- **Reference**: [AGENTS.md](mdc:AGENTS.md#profiling-and-benchmark-output)
