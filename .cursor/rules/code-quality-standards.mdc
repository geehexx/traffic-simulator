---
globs: **
description: Essential code quality patterns
alwaysApply: true
---

# Code Quality Standards

## Type Safety
- **Pattern**: Use `from __future__ import annotations`
- **Reference**: [Quality Standards Guide](mdc:docs/QUALITY_STANDARDS.md#type-annotations)

## Import Organization
- **Pattern**: Standard library, third-party, local imports
- **Reference**: [Quality Standards Guide](mdc:docs/QUALITY_STANDARDS.md#import-organization)

## Error Handling
- **Pattern**: Specific exceptions, context in messages
- **Reference**: [Quality Standards Guide](mdc:docs/QUALITY_STANDARDS.md#error-handling)

## Quality Gates
- **Tools**: Pyright, Ruff, Bandit, Radon (integrated into Bazel)
- **Reference**: [quality_gates.yaml](mdc:quality_gates.yaml) for thresholds
- **Usage**: `bazel build //...` (all quality checks integrated)

## Quality Analysis Modes
- **Check**: `bazel build //...` - Quality gates enforcement (integrated)
- **Monitor**: `bazel test //... --test_output=all` - Detailed quality monitoring
- **Analyze**: `bazel query //...` - Comprehensive static analysis

## Code Style
- **Line Length**: 100 characters
- **Functions**: <50 lines, complexity â‰¤10
- **Classes**: <200 lines
- **Docstrings**: Google-style for public APIs
- **Reference**: [Quality Standards Guide](mdc:docs/QUALITY_STANDARDS.md#code-quality-standards)

## IDE Integration
- **VS Code**: Python extension with Pyright integration
- **PyCharm**: Enable type checking and external tools
- **Configuration**: Automatic detection from pyproject.toml
- **Reference**: [Quality Standards Guide](mdc:docs/QUALITY_STANDARDS.md#ide-integration)
