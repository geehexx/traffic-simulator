---
globs: tests/**/*.py
description: Testing patterns and guidelines for the traffic simulator
---

# Testing Patterns and Guidelines

## Test Organization

### Test Files
- `test_idm.py` - IDM controller and vehicle dynamics
- `test_sim.py` - Simulation integration
- `test_track.py` - Track geometry and safety
- `test_track_properties.py` - Track property validation

### Test Categories
- **Unit Tests**: Individual component testing
- **Integration Tests**: End-to-end simulation testing
- **Deterministic Tests**: Reproducible behavior validation
- **Performance Tests**: 30+ FPS target verification

## Key Test Patterns

### Parameter Variation Testing
```python
def test_per_driver_parameters():
    """Test that different drivers have different parameters."""
    drivers = [Driver(sample_driver_params(cfg, rng), rng) for _ in range(10)]
    headways = [d.params.headway_T_s for d in drivers]
    assert len(set(headways)) > 1  # Should vary
    # Check parameter ranges
    for driver in drivers:
        assert 0.6 <= driver.params.headway_T_s <= 3.0
```

### Deterministic Behavior Testing
```python
def test_deterministic_behavior():
    """Test that simulation is deterministic with fixed seeds."""
    cfg["random"]["master_seed"] = 12345
    sim1, sim2 = Simulation(cfg), Simulation(cfg)
    for _ in range(50):
        sim1.step(0.02)
        sim2.step(0.02)
    # Results should be identical
    for v1, v2 in zip(sim1.vehicles, sim2.vehicles):
        assert abs(v1.state.s_m - v2.state.s_m) < 1e-6
```

### Perception System Testing
```python
def test_occlusion_detection():
    """Test occlusion detection system."""
    cfg["vehicles"]["count"] = 3
    sim = Simulation(cfg)
    # Position vehicles and test perception
    leader, distance, is_occluded = sim._find_first_unobstructed_leader(0)
    assert leader is not None
    assert not is_occluded
```

### HUD Testing (No Window Required)
```python
def test_hud_data_preparation():
    """Test HUD data calculations without rendering."""
    perception_data = [PerceptionData(...)]
    # Test calculations that would be used in HUD
    total_vehicles = len(perception_data)
    occluded_count = sum(1 for p in perception_data if p.is_occluded)
    assert total_vehicles == 3
    assert occluded_count == 1
```

## Test Configuration

### Standard Test Setup
```python
def test_with_config():
    cfg = load_config()
    cfg["vehicles"]["count"] = 3
    cfg["random"]["master_seed"] = 42
    sim = Simulation(cfg)
```

### Performance Testing
```python
def test_performance_target():
    """Test that simulation meets 30+ FPS target."""
    cfg = load_config()
    sim = Simulation(cfg)
    start_time = time.time()
    for _ in range(1000):
        sim.step(0.02)
    end_time = time.time()
    fps_equivalent = 1000 / (end_time * 50)
    assert fps_equivalent >= 30, f"Performance below target: {fps_equivalent:.1f} FPS"
```

## Test Naming Conventions

### Descriptive Names
- `test_*_behavior()` - Behavior patterns
- `test_*_stability()` - System stability
- `test_*_deterministic()` - Reproducible behavior
- `test_*_parameters()` - Parameter validation
- `test_*_limits()` - Constraint enforcement

### Test Documentation
- Clear docstrings explaining test purpose
- Comments explaining complex test logic
- Assertion messages for better debugging

## Coverage Requirements

### Target Coverage
- **Core modules**: â‰¥80% coverage for `traffic_sim/core`
- **Critical paths**: 100% coverage for IDM controller
- **Edge cases**: Test boundary conditions and error states

### Coverage Exclusions
- Rendering code (requires display)
- Performance-critical paths (if they impact test speed)
- External dependencies

## Regression Prevention

### HUD Testing
- Test data preparation without rendering
- Validate calculation accuracy
- Test with various scenarios
- Ensure no crashes on H key toggle

### Performance Regression
- Automated performance tests
- FPS monitoring in CI
- Memory usage validation
- Deterministic behavior checks

## Running Tests

### Commands
```bash
# All tests
uv run python -m pytest tests/ -v

# Specific test file
uv run python -m pytest tests/test_idm.py -v

# With coverage
uv run python -m pytest tests/ --cov=traffic_sim --cov-report=term-missing

# Performance tests only
uv run python -m pytest tests/ -k "performance" -v
```

### Test Environment
- Use deterministic seeds for reproducible results
- Test with various vehicle counts (1, 2, 5, 20)
- Validate edge cases and boundary conditions
- Ensure tests run without display requirements