---
globs: src/traffic_sim/core/**
description: Core simulation architecture patterns
alwaysApply: false
---

# Simulation Patterns {#id:simulation-patterns}

## Core Components {#id:core-components}
- **Simulation**: [simulation.py](mdc:src/traffic_sim/core/simulation.py) - Main simulation engine
- **Driver**: [driver.py](mdc:src/traffic_sim/core/driver.py) - Driver behavior and IDM controller
- **Vehicle**: [vehicle.py](mdc:src/traffic_sim/core/vehicle.py) - Vehicle models and physics
- **Analytics**: [analytics.py](mdc:src/traffic_sim/core/analytics.py) - Real-time data collection
- **Collision**: [collision.py](mdc:src/traffic_sim/core/collision.py) - Pymunk physics integration
- **Logging**: [logging.py](mdc:src/traffic_sim/core/logging.py) - Asynchronous CSV export

## Design Patterns {#id:design-patterns}
- **IDM Controller**: Per-driver parameters with Gaussian copula sampling
- **Perception System**: Occlusion-based detection with dynamic SSD
- **Analytics System**: Real-time data collection with bounded history
- **Collision System**: Pymunk physics with spatial partitioning
- **Data Logging**: Asynchronous CSV export with configurable rates
- **Reference**: See [Architecture Guide](mdc:docs/ARCHITECTURE.md#core-components) for detailed patterns

## State Management {#id:state-management}
- **Pattern**: Immutable state objects where possible
- **Performance**: Fixed timestep, vectorized operations
- **Reference**: See [Architecture Guide](mdc:docs/ARCHITECTURE.md#state-management) for implementation

## Headless Simulation {#id:headless-simulation}
- **Use `SimulationHeadless`** for multiprocessing and benchmarking
- **Avoid Arcade/Pymunk dependencies** in worker processes
- **Use `ProcessPoolExecutor`** for true parallelism (not threading)
- **Serialize only data** between processes, not objects
- **Reference**: See [simulation_headless.py](mdc:src/traffic_sim/core/simulation_headless.py) for setup

## Performance Optimization {#id:performance-optimization}
- **Analytics**: Bounded collections, batch processing, statistical caching
- **Collisions**: Spatial partitioning, collision filtering, physics stepping
- **Data Logging**: Asynchronous logging, batch writes, selective data collection
- **Event-Driven**: Predictive TTC scheduling, O(n) instead of O(nÂ²) collision checks
- **Reference**: See [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#simulation-optimization) for detailed patterns

## Quick Reference {#id:quick-reference}
- **Core Files**: simulation.py, driver.py, vehicle.py, analytics.py, collision.py, logging.py
- **Key Patterns**: IDM controller, perception system, analytics, collision detection
- **Performance**: Fixed timestep, vectorized operations, spatial partitioning
- **Headless**: Use SimulationHeadless for multiprocessing and benchmarking
- **Reference**: See [Architecture Guide](mdc:docs/ARCHITECTURE.md) for comprehensive patterns
