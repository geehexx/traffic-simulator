---
globs: src/traffic_sim/core/**
description: Core simulation architecture patterns
alwaysApply: false
---

# Simulation Patterns

## Core Components
- Simulation, Driver, Vehicle, Analytics, Collision, Logging modules.

## Design Patterns
- IDM controller; occlusion-based perception; bounded analytics; pymunk collisions; async logging.

## State & Performance
- Immutable state where possible; fixed timestep; vectorization.

## Event-Driven Collision Detection
- Predictive TTC scheduling; adjacency tracking; version-based invalidation.
---
globs: src/traffic_sim/core/**
description: Core simulation architecture patterns
alwaysApply: false
---

# Simulation Patterns

## Core Components
- **Simulation**: [simulation.py](mdc:src/traffic_sim/core/simulation.py)
- **Driver**: [driver.py](mdc:src/traffic_sim/core/driver.py)
- **Vehicle**: [vehicle.py](mdc:src/traffic_sim/core/vehicle.py)
- **Analytics**: [analytics.py](mdc:src/traffic_sim/core/analytics.py)
- **Collision**: [collision.py](mdc:src/traffic_sim/core/collision.py)
- **Logging**: [logging.py](mdc:src/traffic_sim/core/logging.py)

## Design Patterns
- **IDM Controller**: Per-driver parameters with Gaussian copula
- **Perception System**: Occlusion-based detection with dynamic SSD
- **Analytics System**: Real-time data collection with bounded history
- **Collision System**: Pymunk physics with spatial partitioning
- **Data Logging**: Asynchronous CSV export with configurable rates
- **Reference**: [Architecture Guide](mdc:docs/ARCHITECTURE.md#core-components)

## State Management
- **Pattern**: Immutable state objects where possible
- **Reference**: [Architecture Guide](mdc:docs/ARCHITECTURE.md#state-management)

## Performance Considerations
- **Pattern**: Fixed timestep, vectorized operations
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#simulation-optimization)

## IDM Controller
- **Pattern**: Calculate gap → delta_v → s_star → acceleration
- **Reference**: [Architecture Guide](mdc:docs/ARCHITECTURE.md#mathematical-foundations)

## Perception System
- **Pattern**: Line-of-sight calculations, dynamic SSD
- **Reference**: [Architecture Guide](mdc:docs/ARCHITECTURE.md#design-patterns)

## Analytics System
- **Pattern**: Bounded collections, batch processing, statistical caching
- **Key**: Use deque for rolling windows, update at configurable intervals
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#analytics-performance-optimization)

## Collision System
- **Pattern**: Spatial partitioning, collision filtering, physics stepping
- **Key**: Use pymunk spatial hash, filter unnecessary checks, reuse shapes
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#collision-system-performance)

## Data Logging
- **Pattern**: Asynchronous logging, batch writes, selective data collection
- **Key**: Background threads for CSV writing, configurable logging rates
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#data-logging-performance)

## Event-Driven Collision Detection
- **Pattern**: Predictive TTC scheduling, adjacency tracking, version-based invalidation
- **Key**: Only check collision pairs when time-to-collision < horizon
- **Performance**: O(n) instead of O(n²) collision checks
- **Reference**: [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#event-driven-collision-detection)
