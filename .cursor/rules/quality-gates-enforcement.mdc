---
description: Quality gates enforcement and static analysis workflow
alwaysApply: true
---

# Quality Gates Enforcement

## Static Analysis Tools
- **MyPy**: Type checking with [mypy.ini](mdc:mypy.ini)
- **Pyright**: Enhanced type checking with [pyrightconfig.json](mdc:pyrightconfig.json)
- **Ruff**: Linting and formatting
- **Pylint**: Code quality with [pylintrc](mdc:pylintrc)
- **Bandit**: Security scanning with [bandit.yaml](mdc:bandit.yaml)
- **Radon**: Complexity analysis with [radon.cfg](mdc:radon.cfg)

## Quality Thresholds
- **Ruff**: 0 errors, ≤5 warnings
- **MyPy**: 0 errors, ≤3 warnings
- **Pyright**: 0 errors, ≤5 warnings
- **Pylint**: ≥8.0/10 score
- **Bandit**: 0 high/medium severity issues
- **Radon**: 0 C/D/E/F complexity functions
- **Coverage**: ≥80% line coverage

## Pre-commit Workflow
- Install hooks: `uv run pre-commit install`
- Run all checks: `uv run pre-commit run --all-files`
- Quality gates run automatically on commit
- Fix issues before committing

## Quality Scripts
- Run quality gates: `uv run python scripts/quality_gates.py`
- Quality monitoring: `uv run python scripts/quality_monitor.py`
- Comprehensive analysis: `uv run python scripts/static_analysis.py`

## CI/CD Integration
- Quality gates run in GitHub Actions
- Build fails if quality standards not met
- Automated testing with coverage reporting
- Pre-commit hooks prevent low-quality code

## Fixing Common Issues
- **Type errors**: Add proper type hints
- **Linting**: Run `uv run ruff check src/ --fix`
- **Formatting**: Run `uv run ruff format src/`
- **Security**: Review and fix Bandit warnings
- **Complexity**: Refactor high-complexity functions

## Documentation
- See [static-analysis.md](mdc:docs/static-analysis.md) for detailed guide
- See [development.md](mdc:docs/development.md) for workflow
- Quality reports saved to `quality_report.json`