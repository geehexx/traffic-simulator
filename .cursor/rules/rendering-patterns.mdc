---
globs: src/traffic_sim/render/**
description: Arcade rendering guidelines
alwaysApply: false
---

# Rendering Patterns {#id:rendering-patterns}

## Arcade Integration {#id:arcade-integration}
- **Main Window**: [app.py](mdc:src/traffic_sim/render/app.py) - Primary rendering application
- **Type Stubs**: [stubs/arcade/](mdc:stubs/arcade/) - Type safety for Arcade API
- **Reference**: See [Architecture Guide](mdc:docs/ARCHITECTURE.md#rendering-architecture) for detailed patterns

## Rendering Performance {#id:rendering-performance}
- **Text Object Caching**: Reuse text objects for HUD elements
- **Draw Call Batching**: Group similar operations
- **Minimal Allocations**: Avoid per-frame object creation
- **Reference**: See [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md#rendering-optimization) for optimization

## Coordinate Systems {#id:coordinate-systems}
- **Simulation**: Use meters for physics calculations
- **Rendering**: Use pixels for display
- **Conversion**: Scale between meters and pixels as needed

## HUD Design {#id:hud-design}
- **Minimal Mode**: Essential information only
- **Full Mode**: Comprehensive data display
- **Toggle**: Switch between modes as needed
- **Occlusion-Aware**: Hide panels when not visible

## Arcade API Calls {#id:arcade-api-calls}
- **Valid Functions**: Use only documented Arcade functions
- **Examples**: `draw_lbwh_rectangle_filled`, `draw_lrbt_rectangle_filled`
- **Reference**: See [Arcade API Consistency](mdc:.cursor/rules/arcade-api-consistency.mdc) for validation

## Performance Target {#id:performance-target}
- **FPS**: Honor project performance standards (see [Quality Standards](mdc:docs/QUALITY_STANDARDS.md) and [Performance Guide](mdc:docs/PERFORMANCE_GUIDE.md))
- **Target**: Strive for ≥30 FPS with ≥20 vehicles
- **Optimization**: Minimize allocations in the draw path

## Quick Reference {#id:quick-reference}
- **Main File**: [app.py](mdc:src/traffic_sim/render/app.py) - Primary rendering application
- **Performance**: Text object caching, draw call batching, minimal allocations
- **HUD**: Minimal/full modes, occlusion-aware panels
- **API**: Use valid Arcade functions, see API consistency rule
- **Reference**: See [Architecture Guide](mdc:docs/ARCHITECTURE.md#rendering-architecture) for comprehensive patterns
