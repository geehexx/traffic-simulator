---
globs: ["mcp/**/*.py", ".cursor/mcp.json", "config/mcp.yaml"]
description: MCP server development patterns and security guidelines
alwaysApply: false
---

# MCP Development Patterns {#id:mcp-development-patterns}

## MCP Server Architecture {#id:mcp-architecture}
- **Pattern**: Isolated package with clean separation from main codebase
- **Location**: `mcp/` directory with independent `pyproject.toml`
- **Dependencies**: Minimal, focused on MCP SDK and Git operations
- **Reference**: See [MCP Integration Guide](mdc:docs/MCP_INTEGRATION.md) for setup

## Tool Design Principles {#id:tool-design}

### Do's
- **Model actions** rather than command-line executables
- **Implement hybrid operations** that handle complex workflows internally
- **Provide structured outputs** with file paths and actionable next steps
- **Include safety guards** and confirmation requirements for destructive operations

### Don'ts
- **Don't expose** raw command-line interfaces
- **Don't allow** unrestricted file system access
- **Don't skip** validation of user inputs

### Example
```python
def git_commit_workflow(message: str, paths: Optional[List[str]] = None) -> Dict[str, Any]:
    """Complete commit workflow with staging, diff preview, and validation."""
    # Internal logic handles staging, validation, and commit
    # Returns structured result with commit hash and summary
```

## Security Patterns {#id:security-patterns}

### Path Allowlists
- **Restrict Git operations** to allowed directories (`src/`, `config/`, `docs/`, `scripts/`, `tests/`)
- **Validate paths** before any file system operations
- **Prevent access** to sensitive directories (`.git/`, `venv/`, `node_modules/`)

### Input Validation
- **Validate all inputs** before processing
- **Sanitize user data** to prevent injection attacks
- **Check permissions** before file operations

## Testing Patterns {#id:testing-patterns}
- **Unit Tests**: Test individual tool functions
- **Integration Tests**: Test tool interactions with external systems
- **Security Tests**: Verify path restrictions and input validation
- **Reference**: See [MCP Integration Guide](mdc:docs/MCP_INTEGRATION.md#testing) for testing setup

## Quick Reference {#id:quick-reference}
- **Architecture**: Isolated package in `mcp/` directory
- **Tool Design**: Model actions, provide structured outputs, include safety guards
- **Security**: Path allowlists, input validation, permission checks
- **Testing**: Unit, integration, and security tests
- **Reference**: See [MCP Integration Guide](mdc:docs/MCP_INTEGRATION.md) for comprehensive patterns
