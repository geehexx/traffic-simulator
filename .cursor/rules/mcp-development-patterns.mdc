---
globs: ["mcp/**/*.py", ".cursor/mcp.json", "config/mcp.yaml"]
description: "MCP server development patterns and security guidelines"
alwaysApply: false
---

# MCP Development Patterns

## MCP Server Architecture

**Pattern**: Isolated package with clean separation from main codebase
- **Location**: `mcp/` directory with independent `pyproject.toml`
- **Dependencies**: Minimal, focused on MCP SDK and Git operations
- **Reference**: [MCP Integration Guide](mdc:docs/MCP_INTEGRATION.md)

## Tool Design Principles

**Do:**
- Model actions rather than command-line executables
- Implement hybrid operations that handle complex workflows internally
- Provide structured outputs with file paths and actionable next steps
- Include safety guards and confirmation requirements for destructive operations

**Don't:**
- Expose raw command-line interfaces
- Allow unrestricted file system access
- Skip validation of user inputs

**Example:**
```python
def git_commit_workflow(message: str, paths: Optional[List[str]] = None) -> Dict[str, Any]:
    """Complete commit workflow with staging, diff preview, and validation."""
    # Internal logic handles staging, validation, and commit
    # Returns structured result with commit hash and summary
```

## Security Patterns

**Path Allowlists:**
- Restrict Git operations to allowed directories (`src/`, `config/`, `docs/`, `scripts/`, `tests/`)
- Validate all file paths before operations
- Reject operations outside repository root

**Command Validation:**
- Maintain allowlist of permitted commands
- Validate command prefixes against allowlist
- Reject commands with shell metacharacters

**Token Redaction:**
- Automatically redact sensitive tokens from output
- Use regex patterns for common token formats
- Truncate large outputs to prevent context overflow

## Logging and Monitoring

**Pattern**: Structured JSON logs to `runs/mcp/` directory
- **Format**: JSONL with timestamp, tool name, parameters, results
- **Retention**: Daily log files with automatic rotation
- **Security**: Redacted tokens and truncated outputs

**Example:**
```json
{
  "timestamp": "2025-10-01T19:57:25Z",
  "tool_name": "git",
  "operation": "commit_workflow",
  "params": {"message": "feat: add feature", "paths": ["src/feature.py"]},
  "result": {"success": true, "commit_hash": "abc123"},
  "duration_seconds": 0.15
}
```

## Error Handling

**Pattern**: Graceful degradation with informative error messages
- **Git Operations**: Handle repository state errors, provide recovery suggestions
- **Task Execution**: Implement fallback strategies (Bazel â†’ uv)
- **Network Operations**: Timeout handling and retry logic

## Performance Optimization

**Pattern**: Intelligent caching and parallel execution
- **Git State**: Cache repository state between operations
- **Task Execution**: Parallel execution for `run_analysis()`
- **Output Management**: Structured outputs with artifact links

## Testing Strategy

**Pattern**: Comprehensive unit tests with temporary repositories
- **Git Operations**: Test with temporary repos using dulwich
- **Task Execution**: Mock subprocess calls for deterministic testing
- **Security**: Test allowlist enforcement and validation

**Reference**: [MCP Integration Guide](mdc:docs/MCP_INTEGRATION.md#testing)
